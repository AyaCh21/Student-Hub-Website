security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Student
                property: id
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
#            form_login:
#                # "app_login" is the name of the route created previously
#                login_path: user_login_index
#                check_path: user_login_index
            entry_point: App\Security\AuthenticationEntryPoint
            logout:
                path: /logout
            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
                always_remember_me: true
                signature_properties: ['password', 'updatedAt']
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # matches /admin/users/*
        - { path: '^/home', roles: PUBLIC_ACCESS }
        - { path: '^/login', roles: PUBLIC_ACCESS }
        - { path: '^/profile', roles: ROLE_USER }
        - { path: '^/study', roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: Bcrypt
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

            legacy:
                algorithm: sodium
                encode_as_base64: false
                iterations: 1

            App\Entity\User:
                # the new hasher, along with its options
                algorithm: Bcrypt
                migrate_from:
                    - bcrypt # uses the "bcrypt" hasher with the default options
                    - legacy # uses the "legacy" hasher configured above

