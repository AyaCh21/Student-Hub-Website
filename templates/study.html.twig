{% extends 'base.html.twig' %}

{% block title %}Study{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link rel="stylesheet" href="{{ asset('css/study.css') }}">
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/study.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.favorite-toggle').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const courseId = this.dataset.courseId;
                    const isChecked = this.checked;

                    fetch('{{ path('favorite_toggle') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-TOKEN': '{{ csrf_token('favorite_toggle') }}'
                        },
                        body: JSON.stringify({ courseId: courseId })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === 'added') {
                                console.log('Course added to favorites');
                            } else if (data.status === 'removed') {
                                console.log('Course removed from favorites');
                            } else {
                                console.error(data.message);
                            }
                        })
                        .catch(error => console.error('Error:', error));
                });
            });

            document.getElementById('show-favorites').addEventListener('click', () => {
                const favorites = Array.from(document.querySelectorAll('.favorite-toggle:checked')).map(checkbox => checkbox.closest('.course').querySelector('.course-toggle').textContent);
                alert('Favorites: ' + favorites.join(', '));
            });
        });
    </script>
    <script>
        function toggleFavorite(checkbox) {
            var courseId = checkbox.dataset.courseId;
            var isChecked = checkbox.checked;
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "{{ path('favorite_toggle') }}", true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        var response = JSON.parse(xhr.responseText);
                        if (response.status === 'added') {
                            console.log('Course added to favorites.');
                        } else if (response.status === 'removed') {
                            console.log('Course removed from favorites.');
                        }
                    } else {
                        console.error('Failed to toggle favorite.');
                    }
                }
            };
            xhr.send("courseId=" + courseId + "&isChecked=" + isChecked);
        }


    </script>

    <script>
        function toggleFavorite(checkbox) {
            var courseId = checkbox.dataset.courseId;
            var isChecked = checkbox.checked;
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "{{ path('favorite_toggle') }}", true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        var response = JSON.parse(xhr.responseText);
                        if (response.status === 'added') {
                            console.log('Course added to favorites.');
                        } else if (response.status === 'removed') {
                            console.log('Course removed from favorites.');
                        }
                    } else {
                        console.error('Failed to toggle favorite.');
                    }
                }
            };
            xhr.send("courseId=" + courseId + "&isChecked=" + isChecked);
        }


    </script>

{% endblock %}

{% block content %}
    <div class="search-form">
        <input type="text" id="courseSearch" placeholder="Type a course name...">
        <select id="typeSelect">
            <option value="lecture">Lecture</option>
            <option value="lab">Lab</option>
        </select>
        <button onclick="searchCourse()">Search</button>
    </div>

    <div class="favorite-wrapper">
        <div class="phase-header">
            <svg class="phase-icon" xmlns="http://www.w3.org/2000/svg" height="34" fill="#efd0ce" viewBox="0 -960 960 960" width="34">
                <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"></path>
            </svg>
            <h2 class="phase-toggle" onclick="togglePhase(this)">FavoriteCourse</h2>
        </div>
        <ul class="courses" style="display: none;">
            {% for favoriteCourse in favoriteData %}
                <li class="course">
                    <h3 class="course-toggle" onclick="toggleCourse(this)">{{ favoriteCourse.name }}</h3>
                    <label>
                        <input type="checkbox" class="favorite-toggle" data-course-id="{{ favoriteCourse.id }}" onchange="toggleFavorite(this)"
                               {% if favoriteCourse.id in favoriteData|column('id') %}checked  {% endif %}>
                        choose as favorite
                    </label>
                    <!-- Assuming favorite courses have PDF and options as well -->
                    {% if favoriteCourse.pdf is defined and favoriteCourse.pdf is not null %}
                        <div class="pdf-viewer">
                            <embed src="{{ asset(favoriteCourse.pdf) }}" type="application/pdf" width="600" height="400"></embed>
                        </div>
                    {% endif %}
                    <ul class="options" style="display: none;">
                        <li class="option">
                            <a href="{{ path('lecture', {'id': favoriteCourse.id, 'type': 'lecture'}) }}">Lecture</a>
                        </li>
                        <li class="option">
                            <a href="{{ path('lecture', {'id': favoriteCourse.id, 'type': 'lab'}) }}">Lab</a>
                        </li>
                    </ul>
                </li>
            {% endfor %}
        </ul>
    </div>


    <div class="phases-wrapper">
        {% for phase, courses in phaseWiseCourses %}
            <div class="phase-wrapper">
                <div class="phase-header">
                    <svg class="phase-icon" xmlns="http://www.w3.org/2000/svg" height="34" fill="#efd0ce" viewBox="0 -960 960 960" width="34">
                        <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"></path>
                    </svg>
                    <h2 class="phase-toggle" onclick="togglePhase(this)">Phase {{ phase }}</h2>
                </div>
                <ul class="courses" style="display: none;">
                    {% for course in courses %}
                        <li class="course" id="{{ course.name | lower | replace({' ': '_'}) }}">
                            <h3 class="course-toggle" onclick="toggleCourse(this)">{{ course.name }}</h3>
                            <!-- Add toggle favorite checkbox or button -->
                            <label>
                            <input type="checkbox" class="favorite-toggle" data-course-id="{{ course.id }}" onchange="toggleFavorite(this)"
                            {% if course.id in favoriteData|column('id') %}checked  {% endif %}>
                                choose as favorite
                            </label>
                            <!-- End of toggle favorite -->
                            {% if course.pdf is defined and course.pdf is not null %}
                                <div class="pdf-viewer">
                                    <embed src="{{ asset(course.pdf) }}" type="application/pdf" width="600" height="400"></embed>
                                </div>
                            {% endif %}
                            <ul class="options" style="display: none;">
                                <li class="option">
                                    <a href="{{ path('lecture', {'id': course.id, 'type': 'lecture'}) }}">Lecture</a>
                                </li>
                                <li class="option">
                                    <a href="{{ path('lecture', {'id': course.id, 'type': 'lab'}) }}">Lab</a>
                                </li>
                            </ul>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        {% endfor %}
    </div>

    <script>
        document.getElementById('courseSearch').addEventListener('input', filterCourses);
        function filterCourses() {
            const query = document.getElementById('courseSearch').value.trim().toLowerCase();
            const phases = document.querySelectorAll('.phase-wrapper');

            phases.forEach(phase => {
                const courses = phase.querySelectorAll('.course');
                let phaseVisible = false;

                courses.forEach(course => {
                    const courseName = course.querySelector('.course-toggle').textContent.toLowerCase();
                    if (courseName.includes(query)) {
                        course.style.display = 'block';
                        phaseVisible = true;
                    } else {
                        course.style.display = 'none';
                    }
                });

                if (phaseVisible) {
                    phase.querySelector('.courses').style.display = 'block';
                } else {
                    phase.querySelector('.courses').style.display = 'none';
                }
            });
        }

        function searchCourse() {
            document.querySelectorAll('.course').forEach(course => {
                course.style.backgroundColor = '';
                course.querySelector('.options').style.display = 'none';
            });
            document.querySelectorAll('.options li').forEach(option => {
                option.style.backgroundColor = '';
            });
            var courseName = document.getElementById('courseSearch').value.trim().replace(/\s+/g, '_').toLowerCase();
            var type = document.getElementById('typeSelect').value.toLowerCase();
            var courseElement = document.getElementById(courseName);
            var optionElement = document.getElementById(courseName + '-' + type);

            if (courseElement && optionElement) {
                courseElement.closest('.courses').style.display = 'block';
                optionElement.closest('.options').style.display = 'block';
                courseElement.style.backgroundColor = '#4A90E2';
                optionElement.style.backgroundColor = '#D62D20';
                optionElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            } else {
                alert('Course or type not found. Please check your input.');
            }
        }

        function togglePhase(element) {
            var courses = element.parentElement.nextElementSibling;
            if (courses.style.display === 'none' || !courses.style.display) {
                courses.style.display = 'block';
            } else {
                courses.style.display = 'none';
            }
        }

        function toggleCourse(element) {
            var options = element.nextElementSibling.nextElementSibling;
            if (options.style.display === 'none' || !options.style.display) {
                options.style.display = 'block';
            } else {
                options.style.display = 'none';
            }
        }
    </script>
            </div>
    </div>
    <div id="selected-option"></div> {# Display selected option here #}
{% endblock %}
